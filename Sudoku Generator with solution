import random
import numpy as np

def generate_sudoku(difficulty):
    while True:
        grid = _generate_partial_sudoku(difficulty)
        solved_grid = np.copy(grid)
        if solve_sudoku(solved_grid):
            unique_solution = True
            break
    return grid

def _generate_partial_sudoku(difficulty):
    if difficulty == "Easy":
        empty_cells = 40
    elif difficulty == "Medium":
        empty_cells = 55
    elif difficulty == "Hard":
        empty_cells = 65
    else:
        print("Invalid difficulty level. Defaulting to Medium.")
        empty_cells = 55
    
    # Generate a complete Sudoku grid
    grid = [[(i * 3 + i // 3 + j) % 9 + 1 for j in range(9)] for i in range(9)]
    random.shuffle(grid)
    grid = np.array(grid)
    grid = grid.T

    # Mask cells based on difficulty level
    cells = [(i, j) for i in range(9) for j in range(9)]
    random.shuffle(cells)
    for i in range(empty_cells):
        row, col = cells.pop()
        grid[row][col] = 0

    return grid

def print_sudoku(grid):
    print("+_______+_______+_______+")
    for i in range(9):
        if i % 3 == 0 and i != 0:
            print("+_______+_______+_______+")
        for j in range(9):
            if j % 3 == 0:
                print("|", end=" ")
            if grid[i][j] == 0:
                print(".", end=" ")
            else:
                print(grid[i][j], end=" ")
        print("|")
    print("+_______+_______+_______+")

def is_valid_move(grid, row, col, num):
    # Check row
    if num in grid[row]:
        return False
    # Check column
    if num in [grid[i][col] for i in range(9)]:
        return False
    # Check 3x3 box
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if grid[start_row + i][start_col + j] == num:
                return False
    return True

def solve_sudoku(grid):
    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                for num in range(1, 10):
                    if is_valid_move(grid, row, col, num):
                        grid[row][col] = num
                        if solve_sudoku(grid):
                            return True
                        grid[row][col] = 0
                return False
    return True

def main():
    print("Welcome to Sudoku Generator!")
    difficulty = input("Choose difficulty (Easy, Medium, Hard): ").capitalize()

    sudoku = generate_sudoku(difficulty)
    print("Generated Sudoku Puzzle:")
    print_sudoku(sudoku)

    while True:
        answer = input("Do you want to see the solution? (yes/no): ").lower()
        if answer == "yes":
            solved_sudoku = np.copy(sudoku)
            if solve_sudoku(solved_sudoku):
                print("Sudoku Solution:")
                print_sudoku(solved_sudoku)
            else:
                print("No solution exists for this Sudoku.")
            break
        elif answer == "no":
            print("Thank you for playing!")
            break
        else:
            print("Invalid input. Please enter 'yes' or 'no'.")

if __name__ == "__main__":
    main()
